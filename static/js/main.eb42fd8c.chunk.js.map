{"version":3,"sources":["serviceWorker.js","ui/components/toDoList/TodoAllTask.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoApp","useState","setTask","center","setCenter","setTaskList","BACKEND_API_URL","useEffect","Axios","get","then","a","data","centers","console","log","className","style","color","type","name","id","onChange","e","target","value","handleChange","placeholder","map","mp","center_id","App","from","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yDCZC,SAASC,IAAW,IAAD,EACAC,mBAAS,IADT,mBACXC,GADW,aAEID,mBAAS,IAFb,mBAEjBE,EAFiB,KAETC,EAFS,OAGQH,mBAAS,IAHjB,mBAGPI,GAHO,WAIlBC,EAAkB,iCAExBC,qBAAU,WACRC,IAAMC,IAAI,4GAA4GC,MAAK,SAAAC,GAEzHP,EAAUO,EAAEC,KAAKC,SACjBC,QAAQC,IAAIZ,QAEd,IACFI,qBAAU,WACRC,IAAMC,IAAIH,EAAgB,SAASI,MAAK,SAAAC,GAEpCN,EAAYM,EAAEC,KAAKA,WAEvB,IAkDF,OACE,yBAAKI,UAAU,QACX,wBAAIC,MAAO,CAACC,MAAM,UAAlB,0BACF,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAAOC,SAAU,SAACC,GAAD,OAnDlC,SAACA,GACpBrB,EAAQqB,EAAEC,OAAOC,OAkD2CC,CAAaH,IAAGI,YAAY,qBACrFxB,EAAOyB,KAAI,SAAAC,GAAO,OACjB,oCACF,0CAAgBA,EAAGC,UAAnB,iBAA4CD,EAAGT,WC3DtCW,MAdf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKf,UAAU,OACb,yBAAKA,UAAY,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,KAAO,KAAKC,UAAWjC,SCN1CkC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SHuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.eb42fd8c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./todoapp.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Axios from 'axios';\n\n\n\nexport function TodoApp() {\n  const [task, setTask] = useState(\"\");\n  const [center, setCenter] = useState([]);\n  const [tasklist, setTaskList] = useState([]);\n  const BACKEND_API_URL = \"http://localhost:8080/v1/todo/\"\n  \n  useEffect(() =>{\n    Axios.get(\"https://cdn-api.co-vin.in/api/v2/appointment/sessions/calendarByDistrict?district_id=696&date=27-05-2021\").then(a => \n    {\n      setCenter(a.data.centers);\n      console.log(center)\n    })\n  },[])\n  useEffect(() =>{\n    Axios.get(BACKEND_API_URL+\"tasks\").then(a => \n    {\n        setTaskList(a.data.data);\n    })\n  },[])\n\n  const handleChange = (e) => {\n    setTask(e.target.value);\n  };\n\n  const AddTask = () => {\n    Axios.post(BACKEND_API_URL+\"tasks/\"+task).then(a => \n    {\n        setTaskList(a.data.data);\n    })\n  };\n\n  const deletetask = (e, id) => {\n    Axios.delete(BACKEND_API_URL+\"Deletetask/\"+id).then(a => \n    {\n        setTaskList(a.data.data);\n    })\n  };\n\n\n  const updateStatus = (e, id) => {\n    Axios.put(BACKEND_API_URL+\"UpdateStatus/\"+id).then(a => \n    {\n        setTaskList(a.data.data);\n    })\n  };\n\n  const updateTaskBucket = (e, id) => {\n    Axios.put(BACKEND_API_URL+\"taskStatus/\"+id+\"/\"+e.target.value).then(a => \n    {\n        setTaskList(a.data.data);\n    })\n};\n\nconst series = ( id) => {\n   return id+1;\n};\n\nconst DropDown = (t) => {\n   return <> \n   Category - \n        <select value={t.category} className=\"DropDown\" onChange={(e) =>updateTaskBucket(e,t.id)} >\n                        <option value=\"A\">TODO</option>\n                        <option value=\"B\">IN PROGRESS</option>\n                        <option value=\"C\">DONE</option>\n        </select>\n        </>\n};\n\n  return (\n    <div className=\"todo\">\n        <h1 style={{color:\"black\"}}> Manage your TODO list</h1>\n      <input type=\"text\" name=\"text\" id=\"text\" onChange={(e) => handleChange(e)}placeholder=\"Add task here...\"/>\n      {center.map(mp => {return(\n        <>\n      <li>center Id:-{mp.center_id} center name:-{mp.name}</li>\n      </>\n      )}\n      )}\n        \n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport {TodoApp} from \"../src/ui/components/toDoList/TodoAllTask\"\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      <div className = \"container\">\n          <Switch>            \n            <Route from = '/*' component={TodoApp}/>\n          </Switch>\n        </div>\n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}